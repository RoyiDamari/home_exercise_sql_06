# Exercise 01
# 1
The ON DELETE CASCADE clause specifies that when a row in the parent table (the departments table) is deleted,
all related rows in the child table (the employees table) will automatically be deleted as well.
This ensures referential integrity between the tables.

# 2
When using foreign key without ON DELETE CASCADE,
when you try to delete a row in the parent table (the departments table) that is referenced by a child table
(the employees table), the deletion would be restricted because it would violate the foreign key relationship.

# 3
ON DELETE CASCADE decrease safety because if a parent record is deleted without realizing the cascading effect,
it could unintentionally remove a large number of related records in the child table.
This might lead to unintended data loss if proper caution isn't taken.

# Exercise 02
The first query creates a table random_numbers with two columns,
id: An auto-incrementing integer (because of SERIAL), which serves as the primary key.
random_value: A DECIMAL type column to store random decimal values.

The second query generates 10 random numbers using generate_series(1, 10) and inserts them into the random_value column.
Each random value is generated by multiplying a random floating-point number between 0 and 1 (exclusive) RANDOM by 100.

The third query retrieves and displays all rows from the random_numbers table.

The forth query randomly selects 3 rows from the random_numbers table,
by shuffling the rows randomly, and LIMIT 3 ensures that only 3 rows are returned.

The fifth query updates the row with id = 1 by assigning a new random value to the random_value column.
The new random value is generated using the same process as in the insert step: a random number between 0 and 100,
rounded to 2 decimal places.

The sixth query retrieves and displays all rows from the random_numbers table,
including the row that was updated in the previous step.

::numeric:
This is a type cast operator that converts the result of the expression (RANDOM() * 100)
into a numeric type with the desired precision.

RANDOM():
Generates a random floating-point number between 0 (inclusive) and 1 (exclusive).

ROUND():
Rounds a number to the specified number of decimal places.
In this case, it rounds the random number to 2 decimal places.

GENERATE_SERIES(1, 10):
This generates a series of 10 rows (from 1 to 10).
Each row corresponds to an iteration in which the random value is calculated and inserted into the random_numbers table.

# Exercise 03
# query 1
creates a table named sales with 4 columns.

# query 2
Inserts sample data into the sales table.

# query 3
Retrieves all sales made during March 2024.

# query 4
Retrieves sales that occurred on Sunday or Saturday.

# query 5
Retrieves sales made within the last 7 days.

# query 6
Retrieves sales that occurred between hours 9 AM and 5 PM.

# query 7
Shows the number of sales made each day, from the first to the last day.

# query 8
Retrieves sales that occurred between 12 AM and 12 PM.

# query 9
Retrieves the first recorded sale for each product.

# query 10
Retrieves the last recorded sale for each product.

# query 11
Shows the total sales made between 12 PM to 2 PM for each day.
